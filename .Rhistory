scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
scale_fill_manual(values = color_scheme,
name = "Node color for sample environmental type", guide = guide_legend(override.aes = list(size = 6))) +
labs(x = "longitude", y = "latitude") +
theme_classic() +
theme(
plot.title = element_text(size = 18, face = "bold"),  # 设置标题的大小和字体样式
axis.title = element_text(size = 14),  # 设置坐标轴标签的大小
axis.text = element_text(size = 12),  # 设置坐标轴刻度标签的大小
legend.title = element_text(size = 14),  # 设置图例标题的大小
legend.text = element_text(size = 12),  # 设置图例标签的大小
legend.key.size = unit(1.5, "lines")  # 设置图例的大小
) +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
read_data <- function(n) {
data <- read.xlsx("./Verrucomicrobia全球分布数据.xlsx", sheet = n,colNames = FALSE, rowNames = FALSE)
k <- data.frame(t(data), header = FALSE)
k <- cbind(number = 0:(nrow(k) - 1), k)
colnames(k) <- k[1, ]
rownames(k) <- k[, 1]
k <- k[-1, ]
k <- k[, -1]
return (k)
}
p_cell <- read_data(2)
p_cell[, 4:ncol(p_cell)] <- p_cell[, 4:ncol(p_cell)] %>% mutate_if(is.character, as.numeric)
p_cell
ver <- as.integer(p_cell$`d:Bacteria, p:"Verrucomicrobia"`)
# total <- as.integer(p_cell$`p-all`) - as.integer(p_cell$Un)
# pre <- ver / total
new <- cbind(ver, p_cell)
new <- new %>% filter(empo_1 != 'ALL')
head(new)
df=new[,1:10]
library(ggplot2)
library(dplyr)
library(purrr)
library(broom)
grouped_data <- new %>%
group_by(empo_1, empo_2, empo_3) %>%
summarize(mean_ver = mean(ver, na.rm = TRUE))
# 然后，我们可以使用ggplot2创建堆叠条形图
ggplot(grouped_data, aes(x=factor(""), y=mean_ver, fill=interaction(empo_1, empo_2, empo_3))) +
geom_bar(stat="identity", width=1) +
theme_minimal() +
xlab("Categories") +
ylab("Average of ver") +
theme(legend.position="right")
# Load the necessary libraries
library(ggplot2)
library(readxl)
# Load the data
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "p-cell")
# Clean the data: remove the first two rows and convert to numeric
data <- data[-c(1,2,3),]
data <- sapply(data, as.numeric)
# Calculate the mean and standard deviation
mean_values <- colMeans(data, na.rm = TRUE)
std_values <- apply(data, 2, sd, na.rm = TRUE)
# Plot the bar graph with error bars
df <- data.frame(Habitat = names(mean_values), Mean = mean_values, SD = std_values)
ggplot(df, aes(x = Habitat, y = Mean)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.7) +
geom_errorbar(aes(ymin = (Mean - SD)/100, ymax = (Mean + SD)/100), width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Mean Values of Verrucomicrobia Across Different Habitats with Error Bars",
x = "Habitat",
y = "Mean Value")
# Correlation analysis
correlation_matrix <- cor(data, use = "pairwise.complete.obs", method = "pearson")
print(correlation_matrix)
data <- read.xlsx("./Verrucomicrobia全球分布数据.xlsx", sheet = 1)
df <- data
color_scheme <- c("#AFD888", "#63ADD0", "#FF4540", "#D836C4", "#EE6B9E", "#FF8F40", "#FFFA73", "#00A779")
# 绘制地图
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = df, aes(x = longitude_deg,
y = latitude_deg, size = `cell%`,
fill = interaction(empo_1, empo_2)),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
scale_fill_manual(values = color_scheme,
name = "Node color for sample environmental type", guide = guide_legend(override.aes = list(size = 6))) +
labs(x = "longitude", y = "latitude") +
theme_classic() +
theme(
plot.title = element_text(size = 18, face = "bold"),  # 设置标题的大小和字体样式
axis.title = element_text(size = 14),  # 设置坐标轴标签的大小
axis.text = element_text(size = 12),  # 设置坐标轴刻度标签的大小
legend.title = element_text(size = 14),  # 设置图例标题的大小
legend.text = element_text(size = 12),  # 设置图例标签的大小
legend.key.size = unit(1.5, "lines")  # 设置图例的大小
) +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
library(readxl)
library(tidyverse)
library(openxlsx)
library(ggpubr)
library(maps)
library(broom)
library(reshape2)
library(pheatmap)
data <- read.csv('./env_abundace.csv')
data <- read.csv('./env_abundace.csv')
data <- read.csv('./env_abundace.csv')
data <- read.csv('./env_abundance.csv')
head(data)
abundance <- as.numeric(gsub("%", "", data[,5]))
coordinates <- strsplit(data[,ncol(data)], ' ')
longitude <- sapply(coordinates, function(x) as.numeric(x[1]))
latitude <- sapply(coordinates, function(x) as.numeric(x[2]))
map_data <- data.frame(longitude, latitude, abundance)
map_data <- na.omit(map_data)
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray")+
geom_point(data=map_data, aes(x=longitude, y= latitude,size=abundance))+
theme_bw()
data <- data %>% filter(!is.na(.[[ncol(data)]]))
abundance <- as.numeric(gsub("%", "", data[,5]))
coordinates <- strsplit(data[,ncol(data)], ' ')
longitude <- sapply(coordinates, function(x) as.numeric(x[1]))
latitude <- sapply(coordinates, function(x) as.numeric(x[2]))
map_data <- data.frame(longitude, latitude, abundance)
map_data <- na.omit(map_data)
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray")+
geom_point(data=map_data, aes(x=longitude, y= latitude,size=abundance))+
theme_bw()
ggplot(data=map_data,aes(x=longitude, y=latitude))+geom_point()
summary(map_data)
data <- data %>% filter(!is.na(.[[ncol(data)]]))
abundance <- as.numeric(gsub("%", "", data[,5]))
coordinates <- strsplit(data[,ncol(data)], ' ')
longitude <- sapply(coordinates, function(x) as.numeric(x[1]))
latitude <- sapply(coordinates, function(x) as.numeric(x[2]))
map_data <- data.frame(longitude, latitude, abundance)
map_data <- na.omit(map_data) %>%
filter(longitude > -180 & longitude < 180 & latitude > -90 & latitude < 90)
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray")+
geom_point(data=map_data, aes(x=longitude, y= latitude,size=abundance))+
theme_bw()
data
data %>% tibble()
data %>% tibble() %>% filter(ifelse('soil' %in% X1_y || 'Soil' %in% X2_y, TRUE, FALSE))
data <- data %>% filter(!is.na(.[[ncol(data)]]))
data_soil <- data %>% tibble() %>% filter(ifelse('soil' %in% X1_y || 'Soil' %in% X2_y, TRUE, FALSE))
abundance <- as.numeric(gsub("%", "",data_soil[,5]))
coordinates <- strsplit(data_soil[,ncol(data_soil)], ' ')
data_soil
coordinates <- strsplit(data_soil[,13], ' ')
data_soil[,13]
strsplit(data_soil[,13], ' ')
data <- data %>% filter(!is.na(.[[ncol(data)]]))
data_soil <- data %>% tibble() %>% filter(ifelse('soil' %in% X1_y || 'Soil' %in% X2_y, TRUE, FALSE))
abundance <- as.numeric(gsub("%", "",data_soil[,5]))
coordinates <- strsplit(as.character(data_soil[,13]), ' ')
longitude <- sapply(coordinates, function(x) as.numeric(x[1]))
latitude <- sapply(coordinates, function(x) as.numeric(x[2]))
map_data <- data.frame(longitude, latitude, abundance)
map_data <- na.omit(map_data) %>%
filter(longitude > -180 & longitude < 180 & latitude > -90 & latitude < 90)
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray")+
geom_point(data=map_data, aes(x=longitude, y= latitude,size=abundance))+
theme_bw()
summary(map_data)
map_data
data <- data %>% filter(!is.na(.[[ncol(data)]]))
data_soil <- data %>% tibble() %>% filter(ifelse('soil' %in% X1_y || 'Soil' %in% X2_y, TRUE, FALSE))
abundance <- as.numeric(gsub("%", "",data_soil[,5]))
coordinates <- strsplit(as.character(data_soil[,13]), ' ') %>% tibble()
longitude <- sapply(coordinates, function(x) as.numeric(x[1]))
data <- data %>% filter(!is.na(.[[ncol(data)]]))
data_soil <- data %>% tibble() %>% filter(ifelse('soil' %in% X1_y | 'soil' %in% X2_y, TRUE, FALSE))
abundance <- as.numeric(gsub("%", "",data_soil[,5]))
coordinates <- strsplit(as.character(data_soil[,13]), ' ')
coordinates_df <- tibble(
longitude = sapply(coordinates, function(x) as.numeric(x[1])),
latitude = sapply(coordinates, function(x) as.numeric(x[2]))
)
map_data <- data.frame(longitude, coordinates_df)
map
map_data
coordinates_df
coordinates
coordinates <- strsplit(as.character(data_soil[,13]), '\ ')
data <- read.csv('./dwde2xd2.csv')
data <- read.csv('./dwde2xd2.csv')
data <- read.csv('./dwde2xd2.csv')
data <- read.csv('./dwde2xd2.csv')
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lot,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
data
data %>% head()
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = lon, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lot,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
world_map <- map_data("world")
# reduce the NA in last column
data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data %>% head()
data <- read.csv('./dwde2xd2.csv')
raw_data <- read.csv('./dwde2xd2.csv')
data=raw_data
world_map <- map_data("world")
# reduce the NA in last column
data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data=raw_data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
data %>% head()
data=raw_data %>% select('abundance','lon','lat')
data %>% head()
data %>% drop_na()->data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
# geom_polygon(data = world_map,
#              aes(x = long, y = lat, group = group),
#              fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
data %>% head()
# change abundace to numeric from precentage
data %>% drop_na() %>% mutate(abundance = as.numeric(abundance)) -> data
# change abundace to numeric from precentage
data  %>% mutate(abundance = as.numeric(abundance)) %>% drop_na() -> data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
# geom_polygon(data = world_map,
#              aes(x = long, y = lat, group = group),
#              fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data=raw_data %>% select('abundance','lon','lat')
# change abundace to numeric from precentage
data %>% drop_na()
# change abundace to numeric from precentage
data %>% drop_na() %>%  mutate(abundance = as.numeric(abundance))
# change abundace to numeric from precentage
data %>% drop_na() %>%  as.numeric(gsub("%", "", data$abundance)) / 100
# change abundace to numeric from precentage
data %>% drop_na() %>%  as.numeric(gsub("%", "", data$abundance))
data=raw_data %>% select('abundance','lon','lat')
# change abundace to numeric from precentage
data %>% drop_na() %>%  as.numeric(gsub("%", "", data$abundance))
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data
data=raw_data %>% select('abundance','lon','lat') %>% drop_na()
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
# geom_polygon(data = world_map,
#              aes(x = long, y = lat, group = group),
#              fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data
raw_data
raw_data
raw_data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'Soil',ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data
data %>% summary()
data %>% summarise()
data %>% group_by(env) %>% summarise()
data=raw_data %>% select('abundance','lon','lat') %>% drop_na()
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil',ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data %>% group_by(env) %>% summarise()
raw_data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc'))
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc'))
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc')) %>% select('env','abundance','lon','lat') %>% unique()
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data
raw_data %>% mutate(env=ifelse(soil %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>% mutate(env=if("soil" %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>% mutate(env=if('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>% mutate(env=if('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>%
mutate(env = if("soil" %in% env1, "soil", "dwgc")) %>%
# 检查env1向量中是否包含"soil"
env_value <- if("soil" %in% env1, "soil", "dwgc")
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('gut' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('gut' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('animal' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
if (nrow(raw_data) == length(env1)) {
# 使用tidyverse的管道操作符进行数据转换
raw_data <- raw_data %>%
mutate(env = ifelse(env1 == "soil", "soil", "dwgc")) %>%
distinct(env)  # 使用distinct而不是select和unique，以获取唯一的env值
} else {
warning("raw_data的行数与env1的长度不匹配。")
}
raw_data %>% mutate(env=if_else('animal' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env = if_else(str_detect(env1, "soil"), "soil", env)) %>% select('env') %>% unique()
data <- row_data %>% select('env1_split_1','abundance','lon','lat') %>% drop_na()
data <- raw_data %>% select('env1_split_1','abundance','lon','lat') %>% drop_na()
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data %>% group_by(env1_split_1) %>% summarise(mean_abundance=mean(abundance))
color_scheme <- c("#AFD888", "#63ADD0", "#FF4540", "#D836C4", "#EE6B9E", "#FF8F40", "#FFFA73", "#00A779")
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat,
fill=factor(env1_split_1),
size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
scale_fill_manual(values = color_scheme,
name = "Node color for sample environmental type", guide = guide_legend(override.aes = list(size = 6)))
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
