# Define a vector of colors
my_colors <- c("#AFD888", "#63ADD0", "#FF4540", "#D836C4")
# Define a vector of labels
my_labels <- c("f:Opitutaceae", "f:Puniceicoccaceae", "f:Rubritaleaceae", "f:Verrucomicrobiaceae")
# Define a dodge width
my_width <- 0.8
# Define a bar width
my_bar_width <- 0.7
# Use expand in scale_x_discrete()
ggplot(verrucomicrobia_melted_df, aes(x = habitat, y = percentage, fill = empo_1)) +
geom_bar(stat = "identity", position = position_dodge(width = my_width), color = "black", width = my_bar_width) + # Use different widths for position and geom
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Habitat", y = "Percentage (%)", fill = "Bacteria", title = "Distribution of 'p:Verrucomicrobia' in different habitats") +
guides(fill = guide_legend(ncol = 1, override.aes = list(size = 4))) +
scale_fill_manual(values = my_colors, labels = my_labels) +
theme_classic() +
scale_y_discrete(expand = c(0, 0))
df <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "f-otu",skip=2)
df=
# Filter for rows containing 'p:"Verrucomicrobia"' and remove 'ALL' column
verrucomicrobia_df <- df %>%
filter(grepl('p:"Verrucomicrobia"', empo_3)) %>%
select(-ALL)
# Convert all columns except for 'empo_1' to numeric
for (col in colnames(verrucomicrobia_df)[-1]) {
verrucomicrobia_df[[col]] <- as.numeric(verrucomicrobia_df[[col]])
}
# Melt the dataframe for easier plotting
verrucomicrobia_melted_df <- verrucomicrobia_df %>%
gather(key = "habitat", value = "count", -empo_3) %>%
mutate(habitat = gsub("\\..*$", "", habitat))
# Compute the percentage
verrucomicrobia_melted_df <- verrucomicrobia_melted_df %>%
group_by(habitat) %>%
mutate(percentage = count / sum(count) * 100)
# Define a vector of colors
my_colors <- c("#AFD888", "#63ADD0", "#FF4540", "#D836C4")
# Define a vector of labels
my_labels <- c("f:Opitutaceae", "f:Puniceicoccaceae", "f:Rubritaleaceae", "f:Verrucomicrobiaceae")
my_width <- 0.8
# Define a bar width
my_bar_width <- 0.7
ggplot(verrucomicrobia_melted_df, aes(x = habitat, y = percentage, fill = empo_3)) +
geom_bar(stat = "identity", position = position_dodge(width = my_width), color = "black", width = my_bar_width) +
labs(x = "Habitat", y = "Percentage (%)", fill = "Bacteria", title = "Distribution of 'p:Verrucomicrobia' in different habitats") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
guides(fill = guide_legend(ncol = 1, override.aes = list(size = 4))) +
scale_fill_manual(values = my_colors, labels = my_labels) +
theme_classic() +
scale_y_discrete(expand = c(0, 0))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggsave("f-otu.pdf",units = "in",width = 12, height = 5)
# Load the data
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "f-otu",skip=2)
# Remove the meta-data rows
# data <- data[-c(1:3), ]
data <- data[-1, ]
data <- data %>% select(-ALL)
# Convert the data to numeric
data[, -1] <- sapply(data[, -1], as.numeric)
# Filter rows where empo_1 contains 'Verrucomicrobia'
verrucomicrobia_data <- data[grep("Verrucomicrobia", data$empo_3), ]
verrucomicrobia_data[1]=c('f:Opitutaceae', 'f:Puniceicoccaceae','f:Rubritaleaceae','f:Verrucomicrobiaceae')
# Calculate the proportion for each environment
proportions <- sapply(verrucomicrobia_data[-1], function(x) x / sum(x))
rownames(proportions) <- c('f:Opitutaceae', 'f:Puniceicoccaceae','f:Rubritaleaceae','f:Verrucomicrobiaceae')
# Create the heatmap
heatmap <- pheatmap(proportions)
pdf("heatmap.pdf")
heatmap
dev.off()
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "f-otu",skip=2)
# Remove the meta-data rows
# data <- data[-c(1:3), ]
data <- data[-1, ]
data <- data %>% select(-ALL)
sample=c('f:Opitutaceae', 'f:Puniceicoccaceae','f:Rubritaleaceae','f:Verrucomicrobiaceae')
# Convert the data to numeric
data[, -1] <- sapply(data[, -1], as.numeric)
# Filter rows where empo_1 contains 'Verrucomicrobia'
verrucomicrobia_data <- data[grep("Verrucomicrobia", data$empo_3), ]
verrucomicrobia_data[1]=sample
# Calculate the proportion for each environment
proportions <- sapply(verrucomicrobia_data[-1], function(x) x / sum(x))
rownames(proportions) <- sample
# Create the heatmap
heatmap <- pheatmap(proportions)
pdf("heatmap.pdf")
heatmap
dev.off()
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "g-cell",skip=2)
# Remove the meta-data rows
# data <- data[-c(1:3), ]
data <- data[-1, ]
data <- data %>% select(-ALL)
sample=c(' g:Pelagicoccus', ' g:Puniceicoccus',' g:Spartobacteria_genera_incertae_sedis','g:Terrimicrobium','g:Xiphinematobacter','g:Limisphaera',"g:Subdivision3_genera_incertae_sedis","g:Subdivision5_genera_incertae_sedis","g:Rubritalea"," g:Akkermansia","g:Haloferula","g:Luteolibacter","g:Persicirhabdus","g:Prosthecobacter","g:Roseibacillus","g:Roseimicrobium","g:Verrucomicrobium")
# Convert the data to numeric
data[, -1] <- sapply(data[, -1], as.numeric)
# Filter rows where empo_1 contains 'Verrucomicrobia'
verrucomicrobia_data <- data[grep("Verrucomicrobia", data$empo_3), ]
verrucomicrobia_data[1]=sample
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "g-cell",skip=2)
# Remove the meta-data rows
# data <- data[-c(1:3), ]
data <- data[-1, ]
data <- data %>% select(-ALL)
sample=c(' g:Pelagicoccus', ' g:Puniceicoccus',' g:Spartobacteria_genera_incertae_sedis','g:Terrimicrobium','g:Xiphinematobacter','g:Limisphaera',"g:Subdivision3_genera_incertae_sedis","g:Subdivision5_genera_incertae_sedis","g:Rubritalea"," g:Akkermansia","g:Haloferula","g:Luteolibacter","g:Persicirhabdus","g:Prosthecobacter","g:Roseibacillus","g:Roseimicrobium","g:Verrucomicrobium")
# Convert the data to numeric
data[, -1] <- sapply(data[, -1], as.numeric)
# Filter rows where empo_1 contains 'Verrucomicrobia'
verrucomicrobia_data <- data[grep('p:"Verrucomicrobia"', data$empo_3), ]
verrucomicrobia_data[1]=sample
length(sample)
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "g-cell",skip=2)
# Remove the meta-data rows
# data <- data[-c(1:3), ]
data <- data[-1, ]
data <- data %>% select(-ALL)
sample=c("g:Alterococcus",":Opitutus","g:Cerasicoccus","g:Coraliomargarita",'g:Pelagicoccus','g:Puniceicoccus','g:Spartobacteria_genera_incertae_sedis','g:Terrimicrobium','g:Xiphinematobacter','g:Limisphaera',"g:Subdivision3_genera_incertae_sedis","g:Subdivision5_genera_incertae_sedis","g:Rubritalea","g:Akkermansia","g:Haloferula","g:Luteolibacter","g:Persicirhabdus","g:Prosthecobacter","g:Roseibacillus","g:Roseimicrobium","g:Verrucomicrobium")
# Convert the data to numeric
data[, -1] <- sapply(data[, -1], as.numeric)
# Filter rows where empo_1 contains 'Verrucomicrobia'
verrucomicrobia_data <- data[grep('p:"Verrucomicrobia"', data$empo_3), ]
verrucomicrobia_data[1]=sample
# Calculate the proportion for each environment
proportions <- sapply(verrucomicrobia_data[-1], function(x) x / sum(x))
rownames(proportions) <- sample
# Create the heatmap
heatmap <- pheatmap(proportions)
pdf("heatmap.pdf")
heatmap
dev.off()
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "g-cell",skip=2)
# Remove the meta-data rows
data <- data[-1, ]
data <- data %>% select(-ALL)
sample=c("g:Alterococcus","g:Opitutus","g:Cerasicoccus","g:Coraliomargarita",'g:Pelagicoccus','g:Puniceicoccus','g:Spartobacteria_genera_incertae_sedis','g:Terrimicrobium','g:Xiphinematobacter','g:Limisphaera',"g:Subdivision3_genera_incertae_sedis","g:Subdivision5_genera_incertae_sedis","g:Rubritalea","g:Akkermansia","g:Haloferula","g:Luteolibacter","g:Persicirhabdus","g:Prosthecobacter","g:Roseibacillus","g:Roseimicrobium","g:Verrucomicrobium")
# Convert the data to numeric
data[, -1] <- sapply(data[, -1], as.numeric)
# Filter rows where empo_1 contains 'Verrucomicrobia'
verrucomicrobia_data <- data[grep('p:"Verrucomicrobia"', data$empo_3), ]
verrucomicrobia_data[1]=sample
# Calculate the proportion for each environment
proportions <- sapply(verrucomicrobia_data[-1], function(x) x / sum(x))
rownames(proportions) <- sample
# Create the heatmap
heatmap <- pheatmap(proportions)
pdf("g-cell-heatmap.pdf")
heatmap
dev.off()
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "g-otu",skip=2)
# Remove the meta-data rows
data <- data[-1, ]
data <- data %>% select(-ALL)
sample=c("g:Alterococcus","g:Opitutus","g:Cerasicoccus","g:Coraliomargarita",'g:Pelagicoccus','g:Puniceicoccus','g:Spartobacteria_genera_incertae_sedis','g:Terrimicrobium','g:Xiphinematobacter','g:Limisphaera',"g:Subdivision3_genera_incertae_sedis","g:Subdivision5_genera_incertae_sedis","g:Rubritalea","g:Akkermansia","g:Haloferula","g:Luteolibacter","g:Persicirhabdus","g:Prosthecobacter","g:Roseibacillus","g:Roseimicrobium","g:Verrucomicrobium")
# Convert the data to numeric
data[, -1] <- sapply(data[, -1], as.numeric)
# Filter rows where empo_1 contains 'Verrucomicrobia'
verrucomicrobia_data <- data[grep('p:"Verrucomicrobia"', data$empo_3), ]
verrucomicrobia_data[1]=sample
# Calculate the proportion for each environment
proportions <- sapply(verrucomicrobia_data[-1], function(x) x / sum(x))
rownames(proportions) <- sample
# Create the heatmap
heatmap <- pheatmap(proportions)
pdf("g-otu-heatmap.pdf")
heatmap
dev.off()
library(readxl)
library(tidyverse)
library(openxlsx)
library(ggpubr)
library(maps)
library(broom)
library(reshape2)
library(pheatmap)
data <- read.xlsx("./Verrucomicrobia全球分布数据.xlsx", sheet = 1)
df <- data
color_scheme <- c("#AFD888", "#63ADD0", "#FF4540", "#D836C4", "#EE6B9E", "#FF8F40", "#FFFA73", "#00A779")
# 绘制地图
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group), fill = "lightgray", color = "gray") +
geom_point(data = df, aes(x = longitude_deg, y = latitude_deg, size = `cell%`, fill = interaction(empo_1, empo_2)), alpha = 0.5, shape = 21, color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
scale_fill_manual(values = color_scheme, name = "Node color for sample environmental type", guide = guide_legend(override.aes = list(size = 6))) +
labs(x = "longitude", y = "latitude") +
theme_classic() +
theme(
plot.title = element_text(size = 18, face = "bold"),  # 设置标题的大小和字体样式
axis.title = element_text(size = 14),  # 设置坐标轴标签的大小
axis.text = element_text(size = 12),  # 设置坐标轴刻度标签的大小
legend.title = element_text(size = 14),  # 设置图例标题的大小
legend.text = element_text(size = 12),  # 设置图例标签的大小
legend.key.size = unit(1.5, "lines")  # 设置图例的大小
) +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
read_data <- function(n) {
data <- read.xlsx("./Verrucomicrobia全球分布数据.xlsx", sheet = n,colNames = FALSE, rowNames = FALSE)
k <- data.frame(t(data), header = FALSE)
k <- cbind(number = 0:(nrow(k) - 1), k)
colnames(k) <- k[1, ]
rownames(k) <- k[, 1]
k <- k[-1, ]
k <- k[, -1]
return (k)
}
p_cell <- read_data(2)
p_cell[, 4:ncol(p_cell)] <- p_cell[, 4:ncol(p_cell)] %>% mutate_if(is.character, as.numeric)
p_cell
ver <- as.integer(p_cell$`d:Bacteria, p:"Verrucomicrobia"`)
# total <- as.integer(p_cell$`p-all`) - as.integer(p_cell$Un)
# pre <- ver / total
new <- cbind(ver, p_cell)
new <- new %>% filter(empo_1 != 'ALL')
head(new)
df=new[,1:10]
library(ggplot2)
library(dplyr)
library(purrr)
library(broom)
grouped_data <- new %>%
group_by(empo_1, empo_2, empo_3) %>%
summarize(mean_ver = mean(ver, na.rm = TRUE))
# 然后，我们可以使用ggplot2创建堆叠条形图
ggplot(grouped_data, aes(x=factor(""), y=mean_ver, fill=interaction(empo_1, empo_2, empo_3))) +
geom_bar(stat="identity", width=1) +
theme_minimal() +
xlab("Categories") +
ylab("Average of ver") +
theme(legend.position="right")
# Load the necessary libraries
library(ggplot2)
library(readxl)
# Load the data
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "p-cell")
# Clean the data: remove the first two rows and convert to numeric
data <- data[-c(1,2,3),]
data <- sapply(data, as.numeric)
# Calculate the mean and standard deviation
mean_values <- colMeans(data, na.rm = TRUE)
std_values <- apply(data, 2, sd, na.rm = TRUE)
# Plot the bar graph with error bars
df <- data.frame(Habitat = names(mean_values), Mean = mean_values, SD = std_values)
ggplot(df, aes(x = Habitat, y = Mean)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.7) +
geom_errorbar(aes(ymin = (Mean - SD)/100, ymax = (Mean + SD)/100), width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Mean Values of Verrucomicrobia Across Different Habitats with Error Bars",
x = "Habitat",
y = "Mean Value")
# Correlation analysis
correlation_matrix <- cor(data, use = "pairwise.complete.obs", method = "pearson")
print(correlation_matrix)
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "p-cell")
data
# Load the data
# df <- read_excel("f-cell.xlsx")
df <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "f-cell")
# Filter for rows containing 'p:"Verrucomicrobia"' and remove 'ALL' column
verrucomicrobia_df <- df %>%
filter(grepl('p:"Verrucomicrobia"', empo_1)) %>%
select(-ALL)
# Convert all columns except for 'empo_1' to numeric
for (col in colnames(verrucomicrobia_df)[-1]) {
verrucomicrobia_df[[col]] <- as.numeric(verrucomicrobia_df[[col]])
}
# Melt the dataframe for easier plotting
verrucomicrobia_melted_df <- verrucomicrobia_df %>%
gather(key = "habitat", value = "count", -empo_1) %>%
mutate(habitat = gsub("\\..*$", "", habitat))
# Compute the percentage
verrucomicrobia_melted_df <- verrucomicrobia_melted_df %>%
group_by(habitat) %>%
mutate(percentage = count / sum(count) * 100)
# ggplot(verrucomicrobia_melted_df, aes(x = habitat, y = percentage, fill = empo_1)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#   labs(x = "Habitat", y = "Percentage (%)", fill = "Bacteria", title = "Distribution of 'p:Verrucomicrobia' in different habitats") +
#   guides(fill = guide_legend(ncol = 1, override.aes = list(size = 4)))
# Define a vector of colors
my_colors <- c("#AFD888", "#63ADD0", "#FF4540", "#D836C4")
# Define a vector of labels
my_labels <- c("f:Opitutaceae", "f:Puniceicoccaceae", "f:Rubritaleaceae", "f:Verrucomicrobiaceae")
# Define a dodge width
my_width <- 0.8
# Define a bar width
my_bar_width <- 0.7
# Use expand in scale_x_discrete()
ggplot(verrucomicrobia_melted_df, aes(x = habitat, y = percentage, fill = empo_1)) +
geom_bar(stat = "identity", position = position_dodge(width = my_width), color = "black", width = my_bar_width) + # Use different widths for position and geom
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Habitat", y = "Percentage (%)", fill = "Bacteria", title = "Distribution of 'p:Verrucomicrobia' in different habitats") +
guides(fill = guide_legend(ncol = 1, override.aes = list(size = 4))) +
scale_fill_manual(values = my_colors, labels = my_labels) +
theme_classic() +
scale_y_discrete(expand = c(0, 0))
df <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "f-otu",skip=2)
df=
# Filter for rows containing 'p:"Verrucomicrobia"' and remove 'ALL' column
verrucomicrobia_df <- df %>%
filter(grepl('p:"Verrucomicrobia"', empo_3)) %>%
select(-ALL)
# Convert all columns except for 'empo_1' to numeric
for (col in colnames(verrucomicrobia_df)[-1]) {
verrucomicrobia_df[[col]] <- as.numeric(verrucomicrobia_df[[col]])
}
# Melt the dataframe for easier plotting
verrucomicrobia_melted_df <- verrucomicrobia_df %>%
gather(key = "habitat", value = "count", -empo_3) %>%
mutate(habitat = gsub("\\..*$", "", habitat))
# Compute the percentage
verrucomicrobia_melted_df <- verrucomicrobia_melted_df %>%
group_by(habitat) %>%
mutate(percentage = count / sum(count) * 100)
# Define a vector of colors
my_colors <- c("#AFD888", "#63ADD0", "#FF4540", "#D836C4")
# Define a vector of labels
my_labels <- c("f:Opitutaceae", "f:Puniceicoccaceae", "f:Rubritaleaceae", "f:Verrucomicrobiaceae")
my_width <- 0.8
# Define a bar width
my_bar_width <- 0.7
ggplot(verrucomicrobia_melted_df, aes(x = habitat, y = percentage, fill = empo_3)) +
geom_bar(stat = "identity", position = position_dodge(width = my_width), color = "black", width = my_bar_width) +
labs(x = "Habitat", y = "Percentage (%)", fill = "Bacteria", title = "Distribution of 'p:Verrucomicrobia' in different habitats") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
guides(fill = guide_legend(ncol = 1, override.aes = list(size = 4))) +
scale_fill_manual(values = my_colors, labels = my_labels) +
theme_classic() +
scale_y_discrete(expand = c(0, 0))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggsave("f-otu.pdf",units = "in",width = 12, height = 5)
# Load the data
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "f-otu",skip=2)
# Remove the meta-data rows
# data <- data[-c(1:3), ]
data <- data[-1, ]
data <- data %>% select(-ALL)
# Convert the data to numeric
data[, -1] <- sapply(data[, -1], as.numeric)
# Filter rows where empo_1 contains 'Verrucomicrobia'
verrucomicrobia_data <- data[grep("Verrucomicrobia", data$empo_3), ]
verrucomicrobia_data[1]=c('f:Opitutaceae', 'f:Puniceicoccaceae','f:Rubritaleaceae','f:Verrucomicrobiaceae')
# Calculate the proportion for each environment
proportions <- sapply(verrucomicrobia_data[-1], function(x) x / sum(x))
rownames(proportions) <- c('f:Opitutaceae', 'f:Puniceicoccaceae','f:Rubritaleaceae','f:Verrucomicrobiaceae')
# Create the heatmap
heatmap <- pheatmap(proportions)
pdf("heatmap.pdf")
heatmap
dev.off()
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "g-cell",skip=2)
# Remove the meta-data rows
data <- data[-1, ]
data <- data %>% select(-ALL)
sample=c("g:Alterococcus","g:Opitutus","g:Cerasicoccus","g:Coraliomargarita",'g:Pelagicoccus','g:Puniceicoccus','g:Spartobacteria_genera_incertae_sedis','g:Terrimicrobium','g:Xiphinematobacter','g:Limisphaera',"g:Subdivision3_genera_incertae_sedis","g:Subdivision5_genera_incertae_sedis","g:Rubritalea","g:Akkermansia","g:Haloferula","g:Luteolibacter","g:Persicirhabdus","g:Prosthecobacter","g:Roseibacillus","g:Roseimicrobium","g:Verrucomicrobium")
# Convert the data to numeric
data[, -1] <- sapply(data[, -1], as.numeric)
# Filter rows where empo_1 contains 'Verrucomicrobia'
verrucomicrobia_data <- data[grep('p:"Verrucomicrobia"', data$empo_3), ]
verrucomicrobia_data[1]=sample
# Calculate the proportion for each environment
proportions <- sapply(verrucomicrobia_data[-1], function(x) x / sum(x))
rownames(proportions) <- sample
# Create the heatmap
heatmap <- pheatmap(proportions)
pdf("g-cell-heatmap.pdf")
heatmap
dev.off()
data <- read_excel("Verrucomicrobia全球分布数据.xlsx", sheet = "g-otu",skip=2)
# Remove the meta-data rows
data <- data[-1, ]
data <- data %>% select(-ALL)
sample=c("g:Alterococcus","g:Opitutus","g:Cerasicoccus","g:Coraliomargarita",'g:Pelagicoccus','g:Puniceicoccus','g:Spartobacteria_genera_incertae_sedis','g:Terrimicrobium','g:Xiphinematobacter','g:Limisphaera',"g:Subdivision3_genera_incertae_sedis","g:Subdivision5_genera_incertae_sedis","g:Rubritalea","g:Akkermansia","g:Haloferula","g:Luteolibacter","g:Persicirhabdus","g:Prosthecobacter","g:Roseibacillus","g:Roseimicrobium","g:Verrucomicrobium")
# Convert the data to numeric
data[, -1] <- sapply(data[, -1], as.numeric)
# Filter rows where empo_1 contains 'Verrucomicrobia'
verrucomicrobia_data <- data[grep('p:"Verrucomicrobia"', data$empo_3), ]
verrucomicrobia_data[1]=sample
# Calculate the proportion for each environment
proportions <- sapply(verrucomicrobia_data[-1], function(x) x / sum(x))
rownames(proportions) <- sample
# Create the heatmap
heatmap <- pheatmap(proportions)
pdf("g-otu-heatmap.pdf")
heatmap
dev.off()
library(randomForest)
library(glmnet)
library(Matrix)
library(tidyverse)
library(h2o)
library(corrr)
library(Hmisc)
library(ggpubr)
library(metafor)
library(forestploter)
pathway <- read.csv('./excel/results_with_env.csv')
data =pathway[,4:ncol(pathway)]
attach(data)
selected_columns <- c()
# 获取数据表的列数
num_columns <- ncol(data)
# 循环遍历从第五列开始的其他列
for (i in 2:num_columns) {
# 获取当前列的名称
col <- colnames(data)[i]
# 计算相关性并进行显著性检验
result <- cor.test(data$GC, data[, col])
# 检查p值是否小于0.05
# 检查p值是否小于0.05，并且非零值数量大于一半
if (result$p.value < 0.05 && sum(data[, col] != 0) > (nrow(data) / 2)) {
selected_columns <- c(selected_columns, col)
}
}
selected_columns
selected_columns <- data.frame(Column = character(), P_Value = numeric(), Confidence_Interval = character())
# 获取数据表的列数
num_columns <- ncol(data)
# 循环遍历从第二列开始的其他列
for (i in 2:num_columns) {
# 获取当前列的名称
col <- colnames(data)[i]
# 计算相关性并进行显著性检验
result <- cor.test(data$GC, data[, col])
# 检查p值是否小于0.05，并且非零值数量大于一半
if (result$p.value < 0.05 && sum(data[, col] != 0) > (nrow(data) / 2)) {
# 创建一个包含结果的行
row <- data.frame(Column = col,
P_Value = result$p.value,
Confidence_Interval = paste(result$conf.int, collapse = " - "))
# 将行添加到选定列的数据框中
selected_columns <- rbind(selected_columns, row)
}
}
selected_columns
selected_columns$Confidence_Interval
# 将区间拆分为两个数值
selected_columns$Confidence_Interval <- strsplit(selected_columns$Confidence_Interval, " - ")
selected_columns$Lower_Bound <- sapply(selected_columns$Confidence_Interval, function(x) as.numeric(x[1]))
selected_columns$Upper_Bound <- sapply(selected_columns$Confidence_Interval, function(x) as.numeric(x[2]))
# 移除原始的Confidence_Interval列
selected_columns$Confidence_Interval <- NULL
# 生成森林图
ggplot(selected_columns, aes(x = Column, y = P_Value, ymin = Lower_Bound, ymax = Upper_Bound)) +
geom_pointrange() +
coord_flip() +  # 将图形翻转为水平方向
theme_classic()  # 使用经典主题
x=KT
model1 <- lm(GC~x)
plot(GC,x)
summary(model1)
# 初始化h2o环境
h2o.init()
# 转换为H2OFrame
h2o_data <- as.h2o(data)
# 分割数据
# 将数据划分为训练集和验证集
splits <- h2o.splitFrame(h2o_data, ratios = 0.8)
train <- splits[[1]]
test  <- splits[[2]]
# 指定预测目标和输入特征
y <- "GC"  # 预测目标
x <- setdiff(names(h2o_data), y)  # 输入特征，去除预测目标的列
# 使用H2O的AutoML函数来训练模型
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_models = 20,
seed = 1)
# 打印出AutoML的排行榜
lb <- aml@leaderboard
print(lb)
# 使用最佳模型进行预测
preds <- h2o.predict(aml@leader, newdata = test)
# 打印出预测结果s
print(preds)
# Load necessary libraries
library(glmnet)
library(caret)
# Load the data
data <- read.csv("excel/results_with_env.csv")
# Prepare the data
X <- data[, -(1:4)]
y <- data$GC
# Standardize the features
X_scaled <- scale(X)
# Split the data into training set and test set
set.seed(42)
trainIndex <- createDataPartition(y, p = .8,
list = FALSE,
times = 1)
X_train <- X_scaled[trainIndex,]
y_train <- y[trainIndex]
X_test <- X_scaled[-trainIndex,]
y_test <- y[-trainIndex]
# Define the model
model <- cv.glmnet(as.matrix(X_train), y_train, alpha = 1)
# Get the lambda that gives minimum mean cross-validated error
lambda_min <- model$lambda.min
# Fit the model using the optimal lambda
final_model <- glmnet(as.matrix(X_train), y_train, alpha = 1, lambda = lambda_min)
# Predict on the test set
predictions <- predict(final_model, newx = as.matrix(X_test))
# Calculate R squared
SSE <- sum((predictions - y_test)^2)
SST <- sum((y_test - mean(y_test))^2)
R_squared <- 1 - SSE / SST
print(R_squared)
# Print the coefficients
print(coef(final_model))
