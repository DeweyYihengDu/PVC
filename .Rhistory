labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data %>% head()
data <- read.csv('./dwde2xd2.csv')
raw_data <- read.csv('./dwde2xd2.csv')
data=raw_data
world_map <- map_data("world")
# reduce the NA in last column
data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data=raw_data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
data %>% head()
data=raw_data %>% select('abundance','lon','lat')
data %>% head()
data %>% drop_na()->data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
# geom_polygon(data = world_map,
#              aes(x = long, y = lat, group = group),
#              fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
data %>% head()
# change abundace to numeric from precentage
data %>% drop_na() %>% mutate(abundance = as.numeric(abundance)) -> data
# change abundace to numeric from precentage
data  %>% mutate(abundance = as.numeric(abundance)) %>% drop_na() -> data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
# geom_polygon(data = world_map,
#              aes(x = long, y = lat, group = group),
#              fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data=raw_data %>% select('abundance','lon','lat')
# change abundace to numeric from precentage
data %>% drop_na()
# change abundace to numeric from precentage
data %>% drop_na() %>%  mutate(abundance = as.numeric(abundance))
# change abundace to numeric from precentage
data %>% drop_na() %>%  as.numeric(gsub("%", "", data$abundance)) / 100
# change abundace to numeric from precentage
data %>% drop_na() %>%  as.numeric(gsub("%", "", data$abundance))
data=raw_data %>% select('abundance','lon','lat')
# change abundace to numeric from precentage
data %>% drop_na() %>%  as.numeric(gsub("%", "", data$abundance))
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data
data=raw_data %>% select('abundance','lon','lat') %>% drop_na()
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
# geom_polygon(data = world_map,
#              aes(x = long, y = lat, group = group),
#              fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data
raw_data
raw_data
raw_data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'Soil',ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data
data %>% summary()
data %>% summarise()
data %>% group_by(env) %>% summarise()
data=raw_data %>% select('abundance','lon','lat') %>% drop_na()
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil',ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data %>% group_by(env) %>% summarise()
raw_data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc'))
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc'))
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc')) %>% select('env','abundance','lon','lat') %>% unique()
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data
raw_data %>% mutate(env=ifelse(soil %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>% mutate(env=if("soil" %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>% mutate(env=if('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>% mutate(env=if('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>%
mutate(env = if("soil" %in% env1, "soil", "dwgc")) %>%
# 检查env1向量中是否包含"soil"
env_value <- if("soil" %in% env1, "soil", "dwgc")
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('gut' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('gut' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('animal' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
if (nrow(raw_data) == length(env1)) {
# 使用tidyverse的管道操作符进行数据转换
raw_data <- raw_data %>%
mutate(env = ifelse(env1 == "soil", "soil", "dwgc")) %>%
distinct(env)  # 使用distinct而不是select和unique，以获取唯一的env值
} else {
warning("raw_data的行数与env1的长度不匹配。")
}
raw_data %>% mutate(env=if_else('animal' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env = if_else(str_detect(env1, "soil"), "soil", env)) %>% select('env') %>% unique()
data <- row_data %>% select('env1_split_1','abundance','lon','lat') %>% drop_na()
data <- raw_data %>% select('env1_split_1','abundance','lon','lat') %>% drop_na()
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data %>% group_by(env1_split_1) %>% summarise(mean_abundance=mean(abundance))
color_scheme <- c("#AFD888", "#63ADD0", "#FF4540", "#D836C4", "#EE6B9E", "#FF8F40", "#FFFA73", "#00A779")
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat,
fill=factor(env1_split_1),
size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
scale_fill_manual(values = color_scheme,
name = "Node color for sample environmental type", guide = guide_legend(override.aes = list(size = 6)))
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
library(readr)
library(dplyr)
library(tidyverse)
# Load the data
file_path <- './dwde2xd2.csv'
data <- read_csv(file_path) %>%
mutate(abundance_numeric = parse_number(abundance))
library(readr)
library(dplyr)
library(tidyverse)
# Load the data
file_path <- '../dwde2xd2.csv'
data <- read_csv(file_path) %>%
mutate(abundance_numeric = parse_number(abundance))
# mutate(offspring_none=ifelse(Offspring_Numbers==0,0,1)) %>%
# glm(offspring_none ~ Age+mating+Age*mating, family=binomial, data=.) %>%
# summary() %>% .$coefficients %>%
# kable(format = "markdown", caption="Coefficients of the binomial model (Age+mating+Age*mating)")
data %>%
mutate(abundance_numeric_2=ifelse(abundance_numeric==0,0,1)) %>%
filter(!is.na(env1_split_1)) %>%
glm(abundance_numeric_2 ~ env1_split_1, family=binomial, data=.) %>%
summary()
# Plot the violin Plot
data %>% filter(abundance_numeric >0) %>% filter(!is.na(env1_split_1)) %>%
ggplot(aes(x = env1_split_1, y = log(abundance_numeric + 1))) +
geom_violin() +
geom_boxplot(width = 0.2, aes(fill=env1_split_1)) +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")+
theme_bw()
# Convert 'abundance' from percentage to numeric
# Select environments for analysis
selected_envs <- c('plant', 'animal', 'soil','aquatic')
filtered_data <- data %>%
filter(env1 %in% selected_envs) %>%
mutate(env1 = str_split(env1, ";" , simplify = TRUE)[, 1]) %>%
mutate(env1 = str_replace(env1, "\\|", ";"))
# Plot the boxplot for abundance in the selected environments
ggplot(filtered_data, aes(x = env1, y = log(abundance_numeric + 1))) +
geom_boxplot() +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")+
theme_bw()
filtered_data
filtered_data %>%
ggplot(aes(x = env1, y = log(abundance_numeric + 1))) +
geom_violin() +
geom_boxplot(width = 0.1) +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")
filtered_data %>% lm(log(abundance_numeric + 1) ~ env1, data = .) %>%
broom::tidy() %>%
ggplot(aes(x = term, y = estimate)) +
geom_col() +
coord_flip() +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")
filtered_data %>% lm(log(abundance_numeric + 1) ~ env1, data = .) %>%
summary()
filtered_data %>% lm(log(abundance_numeric + 1) ~ env1, data = .) %>%
anova()
filtered_data %>% lm(log(abundance_numeric + 1) ~ env1, data = .) %>%
broom::tidy() %>% select(term, estimate, p.value)
data %>%
filter(!is.na(env1_split_2)) %>%
ggplot(aes(x = env1_split_2, y = log(abundance_numeric + 1))) +
geom_violin() +
geom_boxplot(width = 0.2, aes(fill=env1_split_2)) +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")+
theme_bw()
# Draw the forest plot
# data %>%
#   filter(!is.na(env1_split_2)) %>%
#   lm(log(abundance_numeric + 1) ~ env1_split_2, data = .) %>%
#   broom::tidy() %>%
#   ggplot(aes(x = term, y = estimate)) +
#   geom_col() +
#   coord_flip() +
#   labs(title = "Abundance Boxplot for Selected Environments",
#              x = "Environment",
#              y = "Abundance")
# Draw forest plot
data %>%
filter(!is.na(env1_split_2)) %>%
lm(log(abundance_numeric + 1) ~ env1_split_2, data = .) %>%
summary()
data %>%
filter(!is.na(env1_split_2)) %>%
lm(log(abundance_numeric+1) ~ env1_split_2, data = .) -> model
model %>% plot(which = c(1,2,3,5))
model %>% anova()
model %>% broom::tidy() %>%
ggplot(aes(x = term, y = estimate)) +
geom_col() +
coord_flip() +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")
library(rattle)
rattle()
filtered_data %>%
ggplot(aes(x = env1, y = log(abundance_numeric + 1))) +
geom_violin() +
geom_boxplot(width = 0.1) +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")+
theme_bw()
library(ggtree)
library(ape)
library(ggplot2)
# 读取树文件
tree <- read.tree("./tree/tree/alignment1.fasta.treefile")
library(ggtree)
library(ape)
library(ggplot2)
# 读取树文件
tree <- read.tree("./tree/tree/alignment1.fasta.treefile")
# 读取树文件
tree <- read.tree("./tree/tree/alignment.fasta.treefile")
# 读取树文件
tree <- read.tree("./tree/tree/alignment_unique.fasta.treefile")
# 绘制基础系统发育树
p <- ggtree(tree)
# 美化树的外观
p <- p +
geom_tiplab(size=3, align=TRUE) +  # 增加标签并对齐
theme_tree2() +                   # 使用树的主题
labs(title="Phylogenetic Tree")   # 添加标题
# 打印绘图
print(p)
dist_matrix <- cophenetic(tree)
# 计算每个样本与其他所有样本的平均距离
mean_distances <- rowMeans(dist_matrix)
# 找出平均距离最大的前三个样本
top3_samples <- names(sort(mean_distances, decreasing = TRUE))[1:3]
cat("差异性最大的前 3 个样本是：", top3_samples, "\n")
# 删除这三个样本
pruned_tree <- drop.tip(tree, top3_samples)
# 绘制新的系统发育树
plot(pruned_tree, main = "Pruned Phylogenetic Tree")
# 获取叶节点的标签
tip_labels <- tree$tip.label
# 找出平均距离最大的前三个样本
top3_samples <- names(sort(mean_distances, decreasing = TRUE))[1:5]
cat("差异性最大的前 3 个样本是：", top3_samples, "\n")
# 删除这三个样本
pruned_tree <- drop.tip(tree, top3_samples)
# 绘制新的系统发育树
plot(pruned_tree, main = "Pruned Phylogenetic Tree")
# 找出平均距离最大的前三个样本
top3_samples <- names(sort(mean_distances, decreasing = TRUE))[1:9]
cat("差异性最大的前 3 个样本是：", top3_samples, "\n")
# 删除这三个样本
pruned_tree <- drop.tip(tree, top3_samples)
# 绘制新的系统发育树
plot(pruned_tree, main = "Pruned Phylogenetic Tree")
# 获取叶节点的标签
tip_labels <- tree$tip.label
# 获取内部节点的标签（如果有）
node_labels <- tree$node.label
# 输出叶节点的标签
cat("叶节点的标签是：\n")
print(tip_labels)
# 输出内部节点的标签
cat("内部节点的标签是：\n")
print(node_labels)
install.packages('xfun')
library(tidyverse)
# Load the csv file
env_info <- read_csv("C:\\Users\\DuYih\\Desktop\\sequence-PVC.csv")
env
env_info
env_info
# Tidy the data
env_info %>% group_by('Project') %>%
summarise('Total' = n())
# Tidy the data
env_info %>% group_by(Project) %>%
summarise(
Number_of_Records = n(),
Unique_Loci = n_distinct(Locus),
Unique_Accessions = n_distinct(Accession),
Unique_Versions = n_distinct(Version),
Isolation_Sources = list(unique(Isolation_Source_Simplified))
)
# Tidy the data
env_info %>% group_by(Project)
# Tidy the data
env_info %>% group_by(Project) %>%
summarise(count=n())
# Tidy the data
env_info %>% group_by(Project*`Isolation Source`) %>%
summarise(count=n())
# Tidy the data
env_info %>% group_by(Project, `Isolation Source`) %>%
summarise(count=n())
env_info %>% group_by(Project) %>%
summarise(count=n())
env_info %>% group_by(Project) %>%
summarise(count=n()) %>%
print()
env_info %>% group_by(Project) %>%
summarise(count=n())
library(tidyverse)
# Load the csv file
env_info <- read_csv("C:\\Users\\DuYih\\Desktop\\sequence-PVC.csv")
env_info
# Tidy the data
env_info %>% group_by(Project, `Isolation Source`) %>%
summarise(count=n())
library(rattle)
rattle()
env_info %>% group_by(Project) %>%
summarise(count=n())
env_info %>% filter(Project == "PRJNA38465")
env_info %>% filter(Project == "PRJNA38465")
group_by(Project, `Isolation Source`) %>%
summarise(count=n())
library(tidyverse)
# Load the csv file
env_info <- read_csv("C:\\Users\\DuYih\\Desktop\\sequence-PVC.csv")
env_info
# Tidy the data
env_info %>% group_by(Project, `Isolation Source`) %>%
summarise(count=n())
env_info %>% group_by(Project) %>%
summarise(count=n())
env_info %>% filter(Project == "PRJNA38465")
group_by(Project, `Isolation Source`) %>%
summarise(count=n())
env_info %>% filter('Project' == "PRJNA38465")
group_by(Project, `Isolation Source`) %>%
summarise(count=n())
env_info %>% group_by(Project) %>%
summarise(count=n())
env_info %>% filter(Project == "PRJNA38465")
env_info %>% filter(Project == "PRJNA38465") %>%
group_by(Project, `Isolation Source`) %>%
summarise(count=n())
env_info %>% group_by(Project) %>%
summarise(count=n())
env_info %>% filter(Project == "PRJNA39207") %>%
group_by(Project, `Isolation Source`) %>%
summarise(count=n())
# select the FJ901344 information
env_info %>% filter(Accession == "FJ901344")
head(env_info)
# select the FJ901344 information
env_info %>% filter(Accession == "FJ902144")
env_info %>% filter(Project == 'PRJNA38465')
# 读取CSV文件
file_path <- "C:\\Users\\DuYih\\Desktop\\github\\PVC\\env_abundance.csv"
data <- read.csv(file_path, stringsAsFactors = FALSE)
# 检查是否存在字符 'FJ902375'
exists <- any(grepl("FJ902375", data))
