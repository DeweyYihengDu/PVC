coordinates <- strsplit(data[,ncol(data)], ' ')
longitude <- sapply(coordinates, function(x) as.numeric(x[1]))
latitude <- sapply(coordinates, function(x) as.numeric(x[2]))
map_data <- data.frame(longitude, latitude, abundance)
map_data <- na.omit(map_data)
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray")+
geom_point(data=map_data, aes(x=longitude, y= latitude,size=abundance))+
theme_bw()
data <- data %>% filter(!is.na(.[[ncol(data)]]))
abundance <- as.numeric(gsub("%", "", data[,5]))
coordinates <- strsplit(data[,ncol(data)], ' ')
longitude <- sapply(coordinates, function(x) as.numeric(x[1]))
latitude <- sapply(coordinates, function(x) as.numeric(x[2]))
map_data <- data.frame(longitude, latitude, abundance)
map_data <- na.omit(map_data)
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray")+
geom_point(data=map_data, aes(x=longitude, y= latitude,size=abundance))+
theme_bw()
ggplot(data=map_data,aes(x=longitude, y=latitude))+geom_point()
summary(map_data)
data <- data %>% filter(!is.na(.[[ncol(data)]]))
abundance <- as.numeric(gsub("%", "", data[,5]))
coordinates <- strsplit(data[,ncol(data)], ' ')
longitude <- sapply(coordinates, function(x) as.numeric(x[1]))
latitude <- sapply(coordinates, function(x) as.numeric(x[2]))
map_data <- data.frame(longitude, latitude, abundance)
map_data <- na.omit(map_data) %>%
filter(longitude > -180 & longitude < 180 & latitude > -90 & latitude < 90)
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray")+
geom_point(data=map_data, aes(x=longitude, y= latitude,size=abundance))+
theme_bw()
data
data %>% tibble()
data %>% tibble() %>% filter(ifelse('soil' %in% X1_y || 'Soil' %in% X2_y, TRUE, FALSE))
data <- data %>% filter(!is.na(.[[ncol(data)]]))
data_soil <- data %>% tibble() %>% filter(ifelse('soil' %in% X1_y || 'Soil' %in% X2_y, TRUE, FALSE))
abundance <- as.numeric(gsub("%", "",data_soil[,5]))
coordinates <- strsplit(data_soil[,ncol(data_soil)], ' ')
data_soil
coordinates <- strsplit(data_soil[,13], ' ')
data_soil[,13]
strsplit(data_soil[,13], ' ')
data <- data %>% filter(!is.na(.[[ncol(data)]]))
data_soil <- data %>% tibble() %>% filter(ifelse('soil' %in% X1_y || 'Soil' %in% X2_y, TRUE, FALSE))
abundance <- as.numeric(gsub("%", "",data_soil[,5]))
coordinates <- strsplit(as.character(data_soil[,13]), ' ')
longitude <- sapply(coordinates, function(x) as.numeric(x[1]))
latitude <- sapply(coordinates, function(x) as.numeric(x[2]))
map_data <- data.frame(longitude, latitude, abundance)
map_data <- na.omit(map_data) %>%
filter(longitude > -180 & longitude < 180 & latitude > -90 & latitude < 90)
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray")+
geom_point(data=map_data, aes(x=longitude, y= latitude,size=abundance))+
theme_bw()
summary(map_data)
map_data
data <- data %>% filter(!is.na(.[[ncol(data)]]))
data_soil <- data %>% tibble() %>% filter(ifelse('soil' %in% X1_y || 'Soil' %in% X2_y, TRUE, FALSE))
abundance <- as.numeric(gsub("%", "",data_soil[,5]))
coordinates <- strsplit(as.character(data_soil[,13]), ' ') %>% tibble()
longitude <- sapply(coordinates, function(x) as.numeric(x[1]))
data <- data %>% filter(!is.na(.[[ncol(data)]]))
data_soil <- data %>% tibble() %>% filter(ifelse('soil' %in% X1_y | 'soil' %in% X2_y, TRUE, FALSE))
abundance <- as.numeric(gsub("%", "",data_soil[,5]))
coordinates <- strsplit(as.character(data_soil[,13]), ' ')
coordinates_df <- tibble(
longitude = sapply(coordinates, function(x) as.numeric(x[1])),
latitude = sapply(coordinates, function(x) as.numeric(x[2]))
)
map_data <- data.frame(longitude, coordinates_df)
map
map_data
coordinates_df
coordinates
coordinates <- strsplit(as.character(data_soil[,13]), '\ ')
data <- read.csv('./dwde2xd2.csv')
data <- read.csv('./dwde2xd2.csv')
data <- read.csv('./dwde2xd2.csv')
data <- read.csv('./dwde2xd2.csv')
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lot,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
data
data %>% head()
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = lon, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lot,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
world_map <- map_data("world")
# reduce the NA in last column
data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data %>% head()
data <- read.csv('./dwde2xd2.csv')
raw_data <- read.csv('./dwde2xd2.csv')
data=raw_data
world_map <- map_data("world")
# reduce the NA in last column
data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data=raw_data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
data %>% head()
data=raw_data %>% select('abundance','lon','lat')
data %>% head()
data %>% drop_na()->data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
# geom_polygon(data = world_map,
#              aes(x = long, y = lat, group = group),
#              fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
data %>% head()
# change abundace to numeric from precentage
data %>% drop_na() %>% mutate(abundance = as.numeric(abundance)) -> data
# change abundace to numeric from precentage
data  %>% mutate(abundance = as.numeric(abundance)) %>% drop_na() -> data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
# geom_polygon(data = world_map,
#              aes(x = long, y = lat, group = group),
#              fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data=raw_data %>% select('abundance','lon','lat')
# change abundace to numeric from precentage
data %>% drop_na()
# change abundace to numeric from precentage
data %>% drop_na() %>%  mutate(abundance = as.numeric(abundance))
# change abundace to numeric from precentage
data %>% drop_na() %>%  as.numeric(gsub("%", "", data$abundance)) / 100
# change abundace to numeric from precentage
data %>% drop_na() %>%  as.numeric(gsub("%", "", data$abundance))
data=raw_data %>% select('abundance','lon','lat')
# change abundace to numeric from precentage
data %>% drop_na() %>%  as.numeric(gsub("%", "", data$abundance))
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data
data=raw_data %>% select('abundance','lon','lat') %>% drop_na()
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
# geom_polygon(data = world_map,
#              aes(x = long, y = lat, group = group),
#              fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance (%)", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
# ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat, size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
data
raw_data
raw_data
raw_data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'Soil',ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data
data %>% summary()
data %>% summarise()
data %>% group_by(env) %>% summarise()
data=raw_data %>% select('abundance','lon','lat') %>% drop_na()
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil',ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data %>% group_by(env) %>% summarise()
raw_data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc'))
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc'))
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc')) %>% select('env','abundance','lon','lat') %>% unique()
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data
raw_data %>% mutate(env=ifelse(soil %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>% mutate(env=if("soil" %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>% mutate(env=if('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>% mutate(env=if('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
raw_data %>%
mutate(env = if("soil" %in% env1, "soil", "dwgc")) %>%
# 检查env1向量中是否包含"soil"
env_value <- if("soil" %in% env1, "soil", "dwgc")
raw_data %>% mutate(env=ifelse('soil' %in% env1,'soil','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('soil' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('gut' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('gut' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env=ifelse('animal' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
if (nrow(raw_data) == length(env1)) {
# 使用tidyverse的管道操作符进行数据转换
raw_data <- raw_data %>%
mutate(env = ifelse(env1 == "soil", "soil", "dwgc")) %>%
distinct(env)  # 使用distinct而不是select和unique，以获取唯一的env值
} else {
warning("raw_data的行数与env1的长度不匹配。")
}
raw_data %>% mutate(env=if_else('animal' %in% env1,'111','dwgc')) %>% select('env') %>% unique()
# ifelse('aquatic' %in% env1,'Water',ifelse('animal' %in% env1,'Animal',NA)))) %>% select('env','abundance','lon','lat') %>% drop_na() -> data
raw_data %>% mutate(env = if_else(str_detect(env1, "soil"), "soil", env)) %>% select('env') %>% unique()
data <- row_data %>% select('env1_split_1','abundance','lon','lat') %>% drop_na()
data <- raw_data %>% select('env1_split_1','abundance','lon','lat') %>% drop_na()
# as.numeric(gsub("%", "", df$percentage_column)) / 100
data$abundance <- as.numeric(gsub("%", "", data$abundance)) / 100
data %>% group_by(env1_split_1) %>% summarise(mean_abundance=mean(abundance))
color_scheme <- c("#AFD888", "#63ADD0", "#FF4540", "#D836C4", "#EE6B9E", "#FF8F40", "#FFFA73", "#00A779")
world_map <- map_data("world")
# reduce the NA in last column
# data <- data[complete.cases(data),]
ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group = group),
fill = "lightgray", color = "gray") +
geom_point(data = data, aes(x = lon,
y = lat,
fill=factor(env1_split_1),
size = abundance),
alpha = 0.5, shape = 21,
color = 'grey40', stroke = 0.5) +
scale_size_continuous(name = "Node size for relative abundance", guide = guide_legend(override.aes = list(color = "black",fill="black"))) +
scale_fill_manual(values = color_scheme,
name = "Node color for sample environmental type", guide = guide_legend(override.aes = list(size = 6)))
labs(x = "longitude", y = "latitude") +
theme_bw() +
NULL
ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
ggsave("world.pdf",units = "in",width = 17.27, height = 6.8)
library(readr)
library(dplyr)
library(tidyverse)
# Load the data
file_path <- './dwde2xd2.csv'
data <- read_csv(file_path) %>%
mutate(abundance_numeric = parse_number(abundance))
library(readr)
library(dplyr)
library(tidyverse)
# Load the data
file_path <- '../dwde2xd2.csv'
data <- read_csv(file_path) %>%
mutate(abundance_numeric = parse_number(abundance))
# mutate(offspring_none=ifelse(Offspring_Numbers==0,0,1)) %>%
# glm(offspring_none ~ Age+mating+Age*mating, family=binomial, data=.) %>%
# summary() %>% .$coefficients %>%
# kable(format = "markdown", caption="Coefficients of the binomial model (Age+mating+Age*mating)")
data %>%
mutate(abundance_numeric_2=ifelse(abundance_numeric==0,0,1)) %>%
filter(!is.na(env1_split_1)) %>%
glm(abundance_numeric_2 ~ env1_split_1, family=binomial, data=.) %>%
summary()
# Plot the violin Plot
data %>% filter(abundance_numeric >0) %>% filter(!is.na(env1_split_1)) %>%
ggplot(aes(x = env1_split_1, y = log(abundance_numeric + 1))) +
geom_violin() +
geom_boxplot(width = 0.2, aes(fill=env1_split_1)) +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")+
theme_bw()
# Convert 'abundance' from percentage to numeric
# Select environments for analysis
selected_envs <- c('plant', 'animal', 'soil','aquatic')
filtered_data <- data %>%
filter(env1 %in% selected_envs) %>%
mutate(env1 = str_split(env1, ";" , simplify = TRUE)[, 1]) %>%
mutate(env1 = str_replace(env1, "\\|", ";"))
# Plot the boxplot for abundance in the selected environments
ggplot(filtered_data, aes(x = env1, y = log(abundance_numeric + 1))) +
geom_boxplot() +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")+
theme_bw()
filtered_data
filtered_data %>%
ggplot(aes(x = env1, y = log(abundance_numeric + 1))) +
geom_violin() +
geom_boxplot(width = 0.1) +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")
filtered_data %>% lm(log(abundance_numeric + 1) ~ env1, data = .) %>%
broom::tidy() %>%
ggplot(aes(x = term, y = estimate)) +
geom_col() +
coord_flip() +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")
filtered_data %>% lm(log(abundance_numeric + 1) ~ env1, data = .) %>%
summary()
filtered_data %>% lm(log(abundance_numeric + 1) ~ env1, data = .) %>%
anova()
filtered_data %>% lm(log(abundance_numeric + 1) ~ env1, data = .) %>%
broom::tidy() %>% select(term, estimate, p.value)
data %>%
filter(!is.na(env1_split_2)) %>%
ggplot(aes(x = env1_split_2, y = log(abundance_numeric + 1))) +
geom_violin() +
geom_boxplot(width = 0.2, aes(fill=env1_split_2)) +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")+
theme_bw()
# Draw the forest plot
# data %>%
#   filter(!is.na(env1_split_2)) %>%
#   lm(log(abundance_numeric + 1) ~ env1_split_2, data = .) %>%
#   broom::tidy() %>%
#   ggplot(aes(x = term, y = estimate)) +
#   geom_col() +
#   coord_flip() +
#   labs(title = "Abundance Boxplot for Selected Environments",
#              x = "Environment",
#              y = "Abundance")
# Draw forest plot
data %>%
filter(!is.na(env1_split_2)) %>%
lm(log(abundance_numeric + 1) ~ env1_split_2, data = .) %>%
summary()
data %>%
filter(!is.na(env1_split_2)) %>%
lm(log(abundance_numeric+1) ~ env1_split_2, data = .) -> model
model %>% plot(which = c(1,2,3,5))
model %>% anova()
model %>% broom::tidy() %>%
ggplot(aes(x = term, y = estimate)) +
geom_col() +
coord_flip() +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")
library(rattle)
rattle()
filtered_data %>%
ggplot(aes(x = env1, y = log(abundance_numeric + 1))) +
geom_violin() +
geom_boxplot(width = 0.1) +
labs(title = "Abundance Boxplot for Selected Environments",
x = "Environment",
y = "Abundance")+
theme_bw()
